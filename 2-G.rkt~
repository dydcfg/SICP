#lang racket

(define (myLoop)
  (define (flatIt) 
    (lambda (x) 
      (if (eq? x '())
          x
          (if (list? (car x))
              (append ((flatIt (car x))) ((flatIt (cdr x))))
              (append (list (car x)) (flatIt (cdr x)))))))
              
  (define (flat-map lis)
    (accumulate append '() (map flatIt lis)))
  
  (let ((lis (read)))
    (if (eq? lis eof)
        void
        (display (flat-map lis)))))

(myLoop)